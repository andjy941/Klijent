package rs.ac.bg.fon.ps.view.form;

import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import rs.ac.bg.fon.ps.communication.Communication;
import rs.ac.bg.fon.ps.PSCommon.communication.Operation;
import rs.ac.bg.fon.ps.PSCommon.communication.Receiver;
import rs.ac.bg.fon.ps.PSCommon.communication.Request;
import rs.ac.bg.fon.ps.PSCommon.communication.Response;
import rs.ac.bg.fon.ps.PSCommon.communication.Sender;
import rs.ac.bg.fon.ps.domain.Karta;
import rs.ac.bg.fon.ps.domain.Klijent;
import rs.ac.bg.fon.ps.domain.Predstava;
import rs.ac.bg.fon.ps.domain.Rezervacija;
import rs.ac.bg.fon.ps.domain.StavkaRezervacije;
import rs.ac.bg.fon.ps.view.form.componenet.table.ReservationsTableModel;

public class FrmPretragaRezervacija extends javax.swing.JDialog {

    /**
     * Creates new form FrmInvoice
     */
  
    private ArrayList<StavkaRezervacije> nove;
      private ArrayList<StavkaRezervacije> stare=new ArrayList<>();
      private ArrayList<StavkaRezervacije> zaIzbacivanje=new ArrayList<>();
      private ArrayList<StavkaRezervacije> zaDodavanje=new ArrayList<>();
      private ArrayList<StavkaRezervacije> nista=new ArrayList<>();
    public FrmPretragaRezervacija(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        prepareView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblInvoiceId = new javax.swing.JLabel();
        txtInvoiceId = new javax.swing.JTextField();
        lblNumberOfShow = new javax.swing.JLabel();
        txtInvoiceNumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInvoice = new javax.swing.JTable();
        btnRemoveInvoiceItem = new javax.swing.JButton();
        panelPredstava = new javax.swing.JPanel();
        lblPredstava = new javax.swing.JLabel();
        cbProduct = new javax.swing.JComboBox<>();
        lblDiscount = new javax.swing.JLabel();
        txtProductPrice = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        txtProductQuantity = new javax.swing.JTextField();
        lblWatched = new javax.swing.JLabel();
        btnAddProduct = new javax.swing.JButton();
        cbWatched = new javax.swing.JComboBox<>();
        btnSaveProduct1 = new javax.swing.JButton();
        jClient = new javax.swing.JLabel();
        cbClients = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        btnChange = new javax.swing.JButton();
        cbReservations = new javax.swing.JComboBox<>();
        btnChose = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        lblChose = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Form for search reservations");

        lblInvoiceId.setText("Id:");

        txtInvoiceId.setEditable(false);

        lblNumberOfShow.setText("Number of shows:");

        tblInvoice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblInvoice);

        btnRemoveInvoiceItem.setText("Remove");
        btnRemoveInvoiceItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveInvoiceItemActionPerformed(evt);
            }
        });

        panelPredstava.setBorder(javax.swing.BorderFactory.createTitledBorder("Predstava"));

        lblPredstava.setText("Predstava:");

        lblDiscount.setText("Discount:");

        lblQuantity.setText("Quantity:");

        lblWatched.setText("Watched:");

        btnAddProduct.setText("Add");
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });

        cbWatched.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ne", "da" }));

        javax.swing.GroupLayout panelPredstavaLayout = new javax.swing.GroupLayout(panelPredstava);
        panelPredstava.setLayout(panelPredstavaLayout);
        panelPredstavaLayout.setHorizontalGroup(
            panelPredstavaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPredstavaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPredstavaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPredstava, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDiscount)
                    .addComponent(lblQuantity)
                    .addComponent(lblWatched))
                .addGap(74, 74, 74)
                .addGroup(panelPredstavaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPredstavaLayout.createSequentialGroup()
                        .addGroup(panelPredstavaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbProduct, 0, 360, Short.MAX_VALUE)
                            .addComponent(txtProductPrice)
                            .addComponent(txtProductQuantity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddProduct))
                    .addComponent(cbWatched, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        panelPredstavaLayout.setVerticalGroup(
            panelPredstavaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPredstavaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPredstavaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPredstava, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddProduct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelPredstavaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDiscount)
                    .addComponent(txtProductPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelPredstavaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblQuantity)
                    .addComponent(txtProductQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPredstavaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblWatched)
                    .addComponent(cbWatched, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSaveProduct1.setText("Cancel");
        btnSaveProduct1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveProduct1ActionPerformed(evt);
            }
        });

        jClient.setText("Select client to find reservation:");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnChange.setText("Enable Change");
        btnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActionPerformed(evt);
            }
        });

        btnChose.setText("Choose");
        btnChose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChoseActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Save Changes");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblChose.setText("Choose your reservation to show:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbReservations, javax.swing.GroupLayout.PREFERRED_SIZE, 848, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChose)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 848, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnRemoveInvoiceItem)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblInvoiceId, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(118, 118, 118)
                                        .addComponent(txtInvoiceId, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblNumberOfShow, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblChose, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                            .addComponent(jClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnSearch)
                                            .addComponent(txtInvoiceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbClients, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 246, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(panelPredstava, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 256, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(btnSaveProduct1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnChange)
                                        .addGap(15, 15, 15)
                                        .addComponent(btnSave)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addComponent(btnDelete)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInvoiceId)
                    .addComponent(txtInvoiceId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInvoiceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumberOfShow))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbClients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jClient))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(lblChose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbReservations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnChose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveInvoiceItem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelPredstava, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveProduct1)
                    .addComponent(btnSave)
                    .addComponent(btnDelete)
                    .addComponent(btnChange)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
        try {
                    Predstava predstava = (Predstava) getCbPredstava().getSelectedItem();
                    Integer discount =  Integer.parseInt(getTxtDiscount().getText().trim());
                    Integer quantity = Integer.parseInt(getTxtProductQuantity().getText().trim());
                    boolean watched=true;
                    if(cbWatched.getSelectedItem().equals("ne")){
                        watched=false;
                    }
                    ReservationsTableModel model = (ReservationsTableModel) getTblRezervacija().getModel();
                    model.addInvoiceItem(predstava, quantity, discount, watched);
                    zaDodavanje.add(new StavkaRezervacije(null, discount, quantity, watched,  ((ReservationsTableModel) getTblRezervacija().getModel()).getInvoice(), predstava));

                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Invalid predstava data!", "Error", JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_btnAddProductActionPerformed

    private void btnRemoveInvoiceItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveInvoiceItemActionPerformed
        int rowIndex = getTblRezervacija().getSelectedRow();
                ReservationsTableModel model = (ReservationsTableModel) getTblRezervacija().getModel();
                if (rowIndex >= 0) {
                          zaIzbacivanje.add(((ReservationsTableModel) getTblRezervacija().getModel()).getInvoice().getStavke().get(rowIndex));
                    System.out.println(((ReservationsTableModel) getTblRezervacija().getModel()).getInvoice().getStavke().get(rowIndex));
                    model.removeInvoiceItem(rowIndex);
             
                } else {
                    JOptionPane.showMessageDialog(this, "Rezervacija item is not selected!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                
    }//GEN-LAST:event_btnRemoveInvoiceItemActionPerformed

    private void btnSaveProduct1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveProduct1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSaveProduct1ActionPerformed

    private void btnChoseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChoseActionPerformed
        // TODO add your handling code here:
            try {
            // TODO add your handling code here:
            if(getCbReservations().getSelectedIndex()!=-1){
                Rezervacija reserve= (Rezervacija)getCbReservations().getSelectedItem();
                //List<StavkaRezervacije> allReservations=reserve.getStavke();
                List<StavkaRezervacije> stavke=getStavke();
                nove=new ArrayList<>();
                
                for(StavkaRezervacije st:stavke){
                    if(st.getRezervacijaId().getRezervacijaId().equals(reserve.getRezervacijaId())){
                        nove.add(st);
                        fillIt(st);
                       
                    }
                    
                }
                
                reserve.setStavke(nove);
                ReservationsTableModel model = new ReservationsTableModel(reserve);
                getTblRezervacija().setModel(model);
                getTxtInvoiceId().setText(reserve.getRezervacijaId().toString());
                getTxtInvoiceNumber().setText(reserve.getBrojPredstave().toString());
                prepareForChangeDelete();
                                JOptionPane.showMessageDialog(this,"Sistem je ucitao rezervaciju");

                
            }
            else{
                JOptionPane.showMessageDialog(this,"Sistem ne moze da ucita rezervaciju verovatno je niste selektovali");
            }
            
        } catch (Exception ex) {
            Logger.getLogger(FrmPretragaRezervacija.class.getName()).log(Level.SEVERE, null, ex);
        }
         
    }//GEN-LAST:event_btnChoseActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            // TODO add your handling code here:
            if(getCbClient().getSelectedIndex()!=-1){
                Klijent client= (Klijent)getCbClient().getSelectedItem();
                List<Rezervacija> allReservations=getReservations();
            List<Rezervacija> selectedReservations=new ArrayList<>();
            for(Rezervacija r:allReservations){
                if(r.getKlijentId().equals(client)){
                    selectedReservations.add(r);
                }
            }
            if(selectedReservations.isEmpty()){
                JOptionPane.showMessageDialog(this,"Sistem ne moze da nadje rezervacije po zadatoj vrednosti"+ "\n"+" Za datog klijenta nema rezervacija");
            }
            else{
            JOptionPane.showMessageDialog(this,"Sistem je nasao rezervacije po zadatoj vrednosti");    
            getCbReservations().setModel(new DefaultComboBoxModel(selectedReservations.toArray()));
            getCbReservations().setSelectedIndex(-1);
            prepareForChoose();
            }
            }
            else{
                JOptionPane.showMessageDialog(this,"Niste selektovali klijenta");
            }
            
        } catch (Exception ex) {
            Logger.getLogger(FrmPretragaRezervacija.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActionPerformed
        // TODO add your handling code here:
        prepareChange();
     
    }//GEN-LAST:event_btnChangeActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        try {
                    
                    ReservationsTableModel model = (ReservationsTableModel) getTblRezervacija().getModel();
                    Rezervacija reserve= (Rezervacija)getCbReservations().getSelectedItem();
                    reserve.setBrojPredstave(Integer.parseInt(getTxtInvoiceNumber().getText().trim()));
                    reserve.setKlijentId((Klijent) getCbClient().getSelectedItem());
                    if(!(reserve.getBrojPredstave()==reserve.getStavke().size())){
                        System.out.println("JOK");
                        throw new Exception("Broj predstava mora biti jednak broju unetih predstavi u tabeli");
                    }

                    updateInvoice(reserve);
                    /*if(!nove.isEmpty()){
                       
                    for(StavkaRezervacije s:nove){
                        System.out.println("Koje sve u tabeli" + s.getPredstavaId());
                        getBackDifferent(s);
                    }
                    }
                    if(!stare.isEmpty()){
                    for(StavkaRezervacije st:stare){
                        getBackDifferentDelete(st);
                    }
                    }
                    if(!zaDodavanje.isEmpty()){
                    for(StavkaRezervacije st:zaDodavanje){
                        addStavke(st);
                    }
                    }
                    if(!zaIzbacivanje.isEmpty()){
                    for(StavkaRezervacije st:zaIzbacivanje){
                        deleteStavke(st);
                    }
                  
                    }*/
                    if(!zaDodavanje.isEmpty()){
                    for(StavkaRezervacije st:zaDodavanje){
                        addStavke(st);
                    }
                    }
                    if(!zaIzbacivanje.isEmpty()){
                    for(StavkaRezervacije st:zaIzbacivanje){
                        for(Karta k:getKarte()){
                            if(k.getStavkaId().getStavkaId().equals(st.getStavkaId())){
                                 deleteKarta(k);
                        }
                        }
                        deleteStavke(st);
                    }
                    }
                    zaDodavanje=new ArrayList<>();
                    zaIzbacivanje=new ArrayList<>();
                    JOptionPane.showMessageDialog(this, "Rezervacija is updated");
                    this.dispose();
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Rezervacija is not updated! " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

                }
      
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
         int br=JOptionPane.showConfirmDialog(this, "Are you sure you want to delete a reservation, potentially deleting tickets for reservation.","WARNING",JOptionPane.YES_NO_OPTION);
        if(br==JOptionPane.YES_OPTION){
          Rezervacija reserve= (Rezervacija)getCbReservations().getSelectedItem();
        try {
            
            for(StavkaRezervacije st:reserve.getStavke()){
                for(Karta k:getKarte()){
                    if(k.getStavkaId().getStavkaId().equals(st.getStavkaId())){
                        deleteKarta(k);
                    }
                }
                deleteStavke(st);
            }
            Communication.getInstance().deleteReserve(reserve);
            JOptionPane.showMessageDialog(this, "Rezervacija successfully deleted.");
            this.dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Rezervacija not deleted."+ex.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
        }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    public JTextField getTxtRezervacijaId() {
        return txtInvoiceId;
    }

    public JLabel getLblRezervacijaId() {
        return lblInvoiceId;
    }
    public JLabel getLblNumberOfShow() {
        return lblNumberOfShow;
    }
    public JLabel getLblShow() {
        return lblPredstava;
    }
     public JLabel getLblDiscount() {
        return lblDiscount;
    }
      public JLabel getLblQuantity() {
        return lblQuantity;
    }
    public JLabel getLblWatched() {
        return lblWatched;
    }
    public JPanel getPanelPredstava(){
        return panelPredstava;
    }
     public JLabel getLblClient() {
        return jClient;
    }
     public JLabel getLblChose() {
        return lblChose;
    }

    public JComboBox<Object> getCbPredstava() {
        return cbProduct;
    }
    public JComboBox<Object> getCbClient() {
        return cbClients;
    }
    public JComboBox<Object> getCbReservations() {
        return cbReservations;
    }
      public JComboBox<String> getCbWatched() {
        return cbWatched;
    }

    public JTable getTblRezervacija() {
        return tblInvoice;
    }

   public JLabel getNumberOfShows(){
       return lblNumberOfShow;
   }
   public JButton getBtnSearch (){
       return btnSearch;
   }
   public JButton getBtnChoose(){
       return btnChose;
   }
   public JButton getBtnRemove(){
       return btnRemoveInvoiceItem;
   }
   public JButton getBtnAddProduct(){
       return btnAddProduct;
   }
    public JButton getBtnDelete(){
       return btnDelete;
   }
    public JButton getBtnSave(){
       return btnSave;
   }
    public JButton getBtnChange(){
       return btnChange;
   }
    public JTextField getTxtInvoiceNumber() {
        return txtInvoiceNumber;
    }
     public JTextField getTxtInvoiceId() {
        return txtInvoiceId;
    }
      public JScrollPane getScrol() {
        return jScrollPane1;
    }

  
    
 

    public JTextField getTxtDiscount() {
        return txtProductPrice;
    }

    public JTextField getTxtProductQuantity() {
        return txtProductQuantity;
    }
   
    public void addBtnAddProductActionListener(ActionListener actionListener) {
        btnAddProduct.addActionListener(actionListener);
    }

    public void addBtnRemoveInvoiceItemActionListener(ActionListener actionListener) {
        btnRemoveInvoiceItem.addActionListener(actionListener);
    }

  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnChose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRemoveInvoiceItem;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveProduct1;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<Object> cbClients;
    private javax.swing.JComboBox<Object> cbProduct;
    private javax.swing.JComboBox<Object> cbReservations;
    private javax.swing.JComboBox<String> cbWatched;
    private javax.swing.JLabel jClient;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblChose;
    private javax.swing.JLabel lblDiscount;
    private javax.swing.JLabel lblInvoiceId;
    private javax.swing.JLabel lblNumberOfShow;
    private javax.swing.JLabel lblPredstava;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblWatched;
    private javax.swing.JPanel panelPredstava;
    private javax.swing.JTable tblInvoice;
    private javax.swing.JTextField txtInvoiceId;
    private javax.swing.JTextField txtInvoiceNumber;
    private javax.swing.JTextField txtProductPrice;
    private javax.swing.JTextField txtProductQuantity;
    // End of variables declaration//GEN-END:variables

    private void prepareView() {
        try {
            getCbPredstava().setModel(new DefaultComboBoxModel(getProducts().toArray()));
            getCbPredstava().setSelectedIndex(-1);
             getCbClient().setModel(new DefaultComboBoxModel(getClients().toArray()));
            getCbClient().setSelectedIndex(-1);
        } catch (Exception ex) {
            Logger.getLogger(FrmPretragaRezervacija.class.getName()).log(Level.SEVERE, null, ex);
        }
        prepare();
        fillTblInvoice();

    }
    private void prepare() {
      getLblChose().setVisible(false);
      getTxtInvoiceId().setVisible(false);
      getLblRezervacijaId().setVisible(false);
      getLblNumberOfShow().setVisible(false);
      getTxtInvoiceNumber().setVisible(false);

      getCbClient().setVisible(true);
      getLblClient().setVisible(true);
      getBtnSearch().setVisible(true);
      
      getCbReservations().setVisible(false);
      getBtnChoose().setVisible(false);
      
      getScrol().setVisible(false);
      getTblRezervacija().setVisible(false);
      getBtnRemove().setVisible(false);
      
      getPanelPredstava().setVisible(false);
      getCbPredstava().setVisible(false);
      getLblShow().setVisible(false);
      getBtnAddProduct().setVisible(false);
      getLblDiscount().setVisible(false);
      getTxtDiscount().setVisible(false);
      getLblQuantity().setVisible(false);
      getTxtProductQuantity().setVisible(false);
      getLblWatched().setVisible(false);
      getCbWatched().setVisible(false);
      getBtnChange().setVisible(false);
      getBtnDelete().setVisible(false);   
      getBtnSave().setVisible(false);
    }
    private void prepareForChoose() {
      getLblChose().setVisible(true);
      getTxtInvoiceId().setVisible(false);
      getLblRezervacijaId().setVisible(false);
      getLblNumberOfShow().setVisible(false);
      getTxtInvoiceNumber().setVisible(false);

      getCbClient().setVisible(true);
      getLblClient().setVisible(true);
      getBtnSearch().setVisible(true);
      
      getCbReservations().setVisible(true);
      getBtnChoose().setVisible(true);
      
      getScrol().setVisible(false);
      getTblRezervacija().setVisible(false);
      getBtnRemove().setVisible(false);
      
      getPanelPredstava().setVisible(false);
      getCbPredstava().setVisible(false);
      getLblShow().setVisible(false);
      getBtnAddProduct().setVisible(false);
      getLblDiscount().setVisible(false);
      getTxtDiscount().setVisible(false);
      getLblQuantity().setVisible(false);
      getTxtProductQuantity().setVisible(false);
      getLblWatched().setVisible(false);
      getCbWatched().setVisible(false);
      getBtnChange().setVisible(false);
      getBtnDelete().setVisible(false);   
      getBtnSave().setVisible(false);
    }
     private void prepareForChangeDelete() {
      getTxtInvoiceId().setVisible(false);
      getLblRezervacijaId().setVisible(false);
      getLblNumberOfShow().setVisible(true);
      getTxtInvoiceNumber().setVisible(true);

      getCbClient().setVisible(true);
      getLblClient().setVisible(true);
      getBtnSearch().setVisible(true);
      
      getCbReservations().setVisible(true);
      getBtnChoose().setVisible(true);
      
      getScrol().setVisible(true);
      getTblRezervacija().setVisible(true);
      getBtnRemove().setVisible(false);
      
      getPanelPredstava().setVisible(false);
      getCbPredstava().setVisible(false);
      getLblShow().setVisible(false);
      getBtnAddProduct().setVisible(false);
      getLblDiscount().setVisible(false);
      getTxtDiscount().setVisible(false);
      getLblQuantity().setVisible(false);
      getTxtProductQuantity().setVisible(false);
      getLblWatched().setVisible(false);
      getCbWatched().setVisible(false);
      getBtnChange().setVisible(true);
      getBtnDelete().setVisible(true);
      getBtnSave().setVisible(false);
    }
     private void prepareChange() {
      getTxtInvoiceId().setVisible(false);
      getLblRezervacijaId().setVisible(false);
      getLblNumberOfShow().setVisible(true);
      getTxtInvoiceNumber().setVisible(true);

      getCbClient().setVisible(true);
      getLblClient().setVisible(true);
      getBtnSearch().setVisible(false);
      
      getCbReservations().setVisible(true);
      getCbReservations().setEnabled(false);
      getBtnChoose().setVisible(true);
      getBtnChoose().setEnabled(false);
      
      getTblRezervacija().setVisible(true);
      getBtnRemove().setVisible(true);
      
      getPanelPredstava().setVisible(true);
      getCbPredstava().setVisible(true);
      getLblShow().setVisible(true);
      getBtnAddProduct().setVisible(true);
      getLblDiscount().setVisible(true);
      getTxtDiscount().setVisible(true);
      getLblQuantity().setVisible(true);
      getTxtProductQuantity().setVisible(true);
      getLblWatched().setVisible(true);
      getCbWatched().setVisible(true);
      getBtnChange().setVisible(false);
      getBtnDelete().setVisible(false);   
      getBtnSave().setVisible(true);
     
    }

    private void fillTblInvoice() {
       
    }

    private List<Predstava> getProducts() throws Exception {
        return Communication.getInstance().getAllProducts();
    }
  private List<Klijent> getClients() throws Exception {
        return Communication.getInstance().getAllClients();
    }
   private List<Rezervacija> getReservations() throws Exception {
        return Communication.getInstance().getAllReservations();
    }
    private void addInvoice(Rezervacija invoice) throws Exception {
        Communication.getInstance().addRezervacija(invoice);
    }
    private void updateInvoice(Rezervacija invoice) throws Exception {
        Communication.getInstance().updateRezervacija(invoice);
    }
     private List<StavkaRezervacije> getStavke() throws Exception {
         return Communication.getInstance().getAllItemReservations();
    }
      private List<Karta> getKarte() throws Exception {
         return Communication.getInstance().getAllTickets();
    }
      private void getBackDifferent(StavkaRezervacije s){
      
          zaDodavanje=new ArrayList<>();
          boolean flag=false;
          if(!stare.isEmpty()){
         for(StavkaRezervacije st:stare){
             if(st.equals(s)){
                 flag=true;
                 nista.add(s);
             }
         }
             if(flag==false){
                 zaDodavanje.add(s);
             }
             
    }else{
          zaDodavanje.add(s);
          }
      }
            private void getBackDifferentDelete(StavkaRezervacije s){
         

          boolean flag=false;
          if(!nista.isEmpty()){
         for(StavkaRezervacije st:nista){
             if(st.equals(s)){
                 flag=true;
              
             }
         }
             if(flag==false){
                 zaIzbacivanje.add(s);
             }
             
    }
      }
             private void fillIt(StavkaRezervacije s){
         
       
          stare.add(s);
             
    
      }

    private void updateStavka(StavkaRezervacije zaIzmenu) throws Exception {
        Communication.getInstance().updateRezervacija(zaIzmenu);
    }
     private void addStavke(StavkaRezervacije st) throws Exception {
         Communication.getInstance().addStavke(st);
    }

    private void deleteStavke(StavkaRezervacije st) throws Exception {
        Communication.getInstance().deleteStavka(st);
    }

    private void deleteKarta(Karta k) throws Exception {
        Communication.getInstance().deleteTicket(k);
    }
}
