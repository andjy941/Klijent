package rs.ac.bg.fon.ps.view.form;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import rs.ac.bg.fon.ps.communication.Communication;
import rs.ac.bg.fon.ps.PSCommon.communication.Operation;
import rs.ac.bg.fon.ps.PSCommon.communication.Receiver;
import rs.ac.bg.fon.ps.PSCommon.communication.Request;
import rs.ac.bg.fon.ps.PSCommon.communication.Response;
import rs.ac.bg.fon.ps.PSCommon.communication.Sender;
import rs.ac.bg.fon.ps.PSCommon.domain.Klijent;
import rs.ac.bg.fon.ps.PSCommon.domain.Predstava;
import rs.ac.bg.fon.ps.PSCommon.domain.Rezervacija;
import rs.ac.bg.fon.ps.PSCommon.domain.StavkaRezervacije;
import rs.ac.bg.fon.ps.view.form.componenet.table.ReservationsTableModel;
/**
 * Forma za pravljenje nove rezervacije
 * Moze da se sacuva ili odustane
 * @author andelalausevic
 */
public class FrmRezervacija extends javax.swing.JDialog {

  
/**
 * Konstruktor klase FrmRezervacija.
 *
 * @param parent Roditeljski prozor.
 * @param modal  Modalnost prozora.
 */
    public FrmRezervacija(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        prepareView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblInvoiceId = new javax.swing.JLabel();
        txtInvoiceId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtInvoiceNumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInvoice = new javax.swing.JTable();
        btnRemoveInvoiceItem = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cbProduct = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtProductPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtProductQuantity = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        btnAddProduct = new javax.swing.JButton();
        jComboWatched = new javax.swing.JComboBox<>();
        btnSaveInvoice = new javax.swing.JButton();
        btnSaveProduct1 = new javax.swing.JButton();
        jClient = new javax.swing.JLabel();
        cbClients = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Form for reservations");

        lblInvoiceId.setText("Id:");

        txtInvoiceId.setEditable(false);

        jLabel2.setText("Number of shows:");

        tblInvoice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblInvoice);

        btnRemoveInvoiceItem.setText("Remove");
        btnRemoveInvoiceItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveInvoiceItemActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Predstava"));

        jLabel5.setText("Predstava:");

        jLabel6.setText("Discount:");

        jLabel7.setText("Quantity:");

        jLabel8.setText("Watched:");

        btnAddProduct.setText("Add");
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });

        jComboWatched.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ne", "da" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbProduct, 0, 360, Short.MAX_VALUE)
                            .addComponent(txtProductPrice)
                            .addComponent(txtProductQuantity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddProduct))
                    .addComponent(jComboWatched, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddProduct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtProductPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(txtProductQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jComboWatched, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSaveInvoice.setText("Save");
        btnSaveInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveInvoiceActionPerformed(evt);
            }
        });

        btnSaveProduct1.setText("Cancel");
        btnSaveProduct1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveProduct1ActionPerformed(evt);
            }
        });

        jClient.setText("Clients:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblInvoiceId, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(118, 118, 118)
                                .addComponent(txtInvoiceId, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jClient, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(71, 71, 71)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtInvoiceNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                                    .addComponent(cbClients, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(698, 698, 698)
                                .addComponent(btnSaveProduct1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSaveInvoice))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 848, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(btnRemoveInvoiceItem)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInvoiceId)
                    .addComponent(txtInvoiceId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInvoiceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(btnRemoveInvoiceItem))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbClients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jClient))
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveInvoice)
                    .addComponent(btnSaveProduct1))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * Metoda koja se poziva kada korisnik pritisne dugme "Add" za dodavanje stavke u rezervaciju.
 * moraju da budu popunjeni svi atributi i predstava selektovana
 * 
 * @param evt Objekat koji predstavlja događaj pritiska na dugme.
 */
    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
        try {
                    Predstava predstava = (Predstava) getCbPredstava().getSelectedItem();
                    Integer discount =  Integer.parseInt(getTxtDiscount().getText().trim());
                    Integer quantity = Integer.parseInt(getTxtProductQuantity().getText().trim());
                    boolean watched=true;
                    if(jComboWatched.getSelectedItem().equals("ne")){
                        watched=false;
                    }
                    ReservationsTableModel model = (ReservationsTableModel) getTblRezervacija().getModel();
                    model.addInvoiceItem(predstava, quantity, discount, watched);
                  
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Invalid predstava data!", "Error", JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_btnAddProductActionPerformed
/**
 * Metoda koja se poziva kada korisnik pritisne dugme "Remove" za uklanjanje stavke iz rezervacije.
 *
 * @param evt Objekat koji predstavlja događaj pritiska na dugme.
 */
    private void btnRemoveInvoiceItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveInvoiceItemActionPerformed
        int rowIndex = getTblRezervacija().getSelectedRow();
                ReservationsTableModel model = (ReservationsTableModel) getTblRezervacija().getModel();
                if (rowIndex >= 0) {
                    model.removeInvoiceItem(rowIndex);
                   
                } else {
                    JOptionPane.showMessageDialog(this, "Rezervacija item is not selected!", "Error", JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_btnRemoveInvoiceItemActionPerformed
/**
 * Metoda koja se poziva kada korisnik pritisne dugme "Sačuvaj rezervaciju" za čuvanje rezervacije.
 *Broj predstavi mora biti jednak stavkama
 * ispisuje se poruka o uspesnosti
 * @param evt Objekat koji predstavlja događaj pritiska na dugme.
 */
    private void btnSaveInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveInvoiceActionPerformed
      try {
                    //DateFormat df = new SimpleDateFormat("dd.MM.yyyy.");
                    ReservationsTableModel model = (ReservationsTableModel) getTblRezervacija().getModel();
                    Rezervacija invoice = model.getInvoice();
                    invoice.setBrojPredstave(Integer.parseInt(getTxtInvoiceNumber().getText().trim()));
                    invoice.setKlijentId((Klijent) getCbClient().getSelectedItem());
                    if(!(invoice.getBrojPredstave()==invoice.getStavke().size())){
                        System.out.println("JOK");
                        throw new Exception("Broj predstava mora biti jednak broju unetih predstavi u tabeli");
                    }
                    addInvoice(invoice);
                    for(StavkaRezervacije st:invoice.getStavke()){
                        try{
                            System.out.println(invoice.getRezervacijaId());
                    st.setRezervacijaId(invoice);
                    addStavke(st);
                        }catch(Exception ex){
                            ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Stavke is not saved! " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        }
                            }
                    
                    this.dispose();
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Rezervacija is not saved! " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

                }
    }//GEN-LAST:event_btnSaveInvoiceActionPerformed
/**
 * Metoda koja se poziva kada korisnik pritisne dugme "Sačuvaj proizvod".
 * NE KORISTI SE
 * @param evt Objekat koji predstavlja događaj pritiska na dugme.
 */
    private void btnSaveProduct1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveProduct1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSaveProduct1ActionPerformed
/**
 * Metoda koja vraća tekstualno polje za unos identifikatora rezervacije.
 *
 * @return Tekstualno polje za unos identifikatora rezervacije.
 */
    public JTextField getTxtRezervacijaId() {
        return txtInvoiceId;
    }
/**
 * Metoda koja vraća oznaku za identifikator rezervacije.
 *
 * @return Oznaka za identifikator rezervacije.
 */
    public JLabel getLblRezervacijaId() {
        return lblInvoiceId;
    }
/**
 * Metoda koja vraća padajući meni za izbor predstave.
 *
 * @return Padajući meni za izbor predstave.
 */

    public JComboBox<Object> getCbPredstava() {
        return cbProduct;
    }
    /**
 * Metoda koja vraća padajući meni za izbor klijenta.
 *
 * @return Padajući meni za izbor klijenta.
 */

        public JComboBox<Object> getCbClient() {
        return cbClients;
    }
/**
 * Metoda koja vraća tabelu rezervacija.
 *
 * @return Tabela rezervacija.
 */
    public JTable getTblRezervacija() {
        return tblInvoice;
    }

   
/**
 * Metoda koja vraća tekstualno polje za unos broja rezervacije.
 *
 * @return Tekstualno polje za unos broja rezervacije.
 */
    public JTextField getTxtInvoiceNumber() {
        return txtInvoiceNumber;
    }

  

 
/**
 * Metoda koja vraća tekstualno polje za unos popusta.
 *
 * @return Tekstualno polje za unos popusta.
 */
    public JTextField getTxtDiscount() {
        return txtProductPrice;
    }
/**
 * Metoda koja vraća tekstualno polje za unos količine sedista.
 *
 * @return Tekstualno polje za unos količine sedista.
 */
    public JTextField getTxtProductQuantity() {
        return txtProductQuantity;
    }
  /**
 * Metoda za dodavanje slušaoca događaja na dugme "Dodaj stavku".
 *
 * @param actionListener Slušalac događaja.
 */ 
    public void addBtnAddProductActionListener(ActionListener actionListener) {
        btnAddProduct.addActionListener(actionListener);
    }
/**
 * Metoda za dodavanje slušaoca događaja na dugme "Ukloni stavku rezervacije".
 *
 * @param actionListener Slušalac događaja.
 */
    public void addBtnRemoveInvoiceItemActionListener(ActionListener actionListener) {
        btnRemoveInvoiceItem.addActionListener(actionListener);
    }
/**
 * Metoda za dodavanje slušaoca događaja na dugme "Sačuvaj rezervaciju".
 *
 * @param actionListener Slušalac događaja.
 */
    public void addBtnSaveInvoiceActionListener(ActionListener actionListener) {
        btnSaveInvoice.addActionListener(actionListener);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JButton btnRemoveInvoiceItem;
    private javax.swing.JButton btnSaveInvoice;
    private javax.swing.JButton btnSaveProduct1;
    private javax.swing.JComboBox<Object> cbClients;
    private javax.swing.JComboBox<Object> cbProduct;
    private javax.swing.JLabel jClient;
    private javax.swing.JComboBox<String> jComboWatched;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblInvoiceId;
    private javax.swing.JTable tblInvoice;
    private javax.swing.JTextField txtInvoiceId;
    private javax.swing.JTextField txtInvoiceNumber;
    private javax.swing.JTextField txtProductPrice;
    private javax.swing.JTextField txtProductQuantity;
    // End of variables declaration//GEN-END:variables
/**
 * Priprema prikaza forme za rezervaciju.
 * setuju se combo boxovi za klijenta i predstave
 */
    private void prepareView() {
        try {
            getCbPredstava().setModel(new DefaultComboBoxModel(getProducts().toArray()));
            getCbPredstava().setSelectedIndex(-1);
             getCbClient().setModel(new DefaultComboBoxModel(getClients().toArray()));
             List<Klijent> klijenti=new ArrayList<>();
             klijenti=getClients();
             	try(PrintWriter out = new PrintWriter(new FileWriter("clients.json"))){
			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			
			out.print(gson.toJson(klijenti));
                        JOptionPane.showMessageDialog(this,"Napravljen dokument sa svim postojecim klijentima");
		} catch (IOException e) {
                    System.out.println("Doslo do greske"+e.getMessage());
			e.printStackTrace();
		}
            getCbClient().setSelectedIndex(-1);
        } catch (Exception ex) {
            Logger.getLogger(FrmRezervacija.class.getName()).log(Level.SEVERE, null, ex);
        }
        fillDefaultValues();
        fillTblInvoice();

    }
    /**
 * Popunjava podrazumevane vrednosti na formi.
 * za sad prazna
 */
    private void fillDefaultValues() {
      
    }
/**
 * Popunjava tabelu rezervacija.
 */
    private void fillTblInvoice() {
        ReservationsTableModel model = new ReservationsTableModel(new Rezervacija());
        getTblRezervacija().setModel(model);
    }
/**
 * Metoda koja vraća listu predstava.
 *
 * @return Lista predstava.
 * @throws Exception Ukoliko neuspešno dohvatanje predstava.
 */
    private List<Predstava> getProducts() throws Exception {
        return Communication.getInstance().getAllProducts();
    }
    /**
 * Metoda koja vraća listu klijenata.
 *
 * @return Lista klijenata.
 * @throws Exception Ukoliko neuspešno dohvatanje klijenata.
 */
  private List<Klijent> getClients() throws Exception {
        return Communication.getInstance().getAllClients();
    }
  /**
 * Metoda za dodavanje rezervacije.
 *
 * @param invoice Rezervacija koja se dodaje.
 * @throws Exception Ukoliko neuspešno dodavanje rezervacije.
 */
    private void addInvoice(Rezervacija invoice) throws Exception {
        Communication.getInstance().addRezervacija(invoice);
    }
/**
 * Metoda za dodavanje stavke rezervacije.
 *
 * @param st Stavka rezervacije koja se dodaje.
 * @throws Exception Ukoliko neuspešno dodavanje stavke rezervacije.
 */
    private void addStavke(StavkaRezervacije st) throws Exception {
         Communication.getInstance().addStavke(st);
    }
}
