/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rs.ac.bg.fon.ps.view.form;

import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.net.Socket;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import rs.ac.bg.fon.ps.communication.Communication;
import rs.ac.bg.fon.ps.communication.LocalStorage;
import rs.ac.bg.fon.ps.PSCommon.communication.Operation;
import rs.ac.bg.fon.ps.PSCommon.communication.Receiver;
import rs.ac.bg.fon.ps.PSCommon.communication.Request;
import rs.ac.bg.fon.ps.PSCommon.communication.Response;
import rs.ac.bg.fon.ps.PSCommon.communication.Sender;
import rs.ac.bg.fon.ps.PSCommon.domain.Karta;
import rs.ac.bg.fon.ps.PSCommon.domain.PlanGledanja;
import rs.ac.bg.fon.ps.PSCommon.domain.Predstava;
import rs.ac.bg.fon.ps.PSCommon.domain.StavkaRezervacije;

import rs.ac.bg.fon.ps.view.form.util.FormMode;
/**
 * Forma koja dozvoljava pravljenje,gledanje podataka o predstavi
 * i brisanje predstave
 * prikazani su id,ime,vreme,mesto i kapacitet predstave
 * @author andelalausevic
 */
public class FrmPredstava extends javax.swing.JDialog {

    /**
     * objekat klase LocalStorage da se iz njega izvuce ili sacuva predstava
     */
    private LocalStorage localStorage = LocalStorage.getInstance();
    /**
 * Konstruktor koji kreira novu instancu forme FrmPredstava.
 * @param parent Roditeljski okvir forme
 * @param modal Modalnost forme
 * @param formMode Re≈æim forme (FORM_ADD, FORM_EDIT, FORM_VIEW)
 */
    public FrmPredstava(java.awt.Frame parent, boolean modal, FormMode formMode) {
        super(parent, modal);
        initComponents();
        prepareView(formMode);
    }

 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSave = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblId = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        lblCapacity = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtID = new javax.swing.JTextField();
        lblTime = new javax.swing.JLabel();
        txtPlace = new javax.swing.JTextField();
        txtTime = new javax.swing.JTextField();
        txtCapacity = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Form for show");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Predstava:"));

        lblId.setText("ID:");

        lblName.setText("Name:");

        lblDescription.setText("Place:");

        lblCapacity.setText("Capacity:");

        lblTime.setText("Time:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblId, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTime)
                    .addComponent(lblCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtPlace)
                    .addComponent(txtTime)
                    .addComponent(txtCapacity, javax.swing.GroupLayout.Alignment.TRAILING)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblId))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescription)
                    .addComponent(txtPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTime)
                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCapacity)
                    .addComponent(txtCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDelete)
                        .addGap(254, 254, 254)
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSave)
                        .addComponent(btnCancel))
                    .addComponent(btnDelete))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * Metoda koja se poziva kada korisnik pritisne dugme za ƒçuvanje predstave.
 * Ova metoda validira unete podatke, kreira objekat predstave sa unetim vrednostima
 * vreme mora da bude buduce vreme
 * kapacitet mora biti broj
 * i poziva odgovarajuƒáu metodu za dodavanje predstave u sistem.
 * pokazace se da li je saved ili not saved
 * @param evt Dogaƒëaj koji je pokrenuo poziv metode
 */
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        try {
            Predstava predstava = new Predstava();
           // predstava.setPredstavaId(Integer.parseInt(getTxtID().getText().trim()));
            predstava.setNaziv(getTxtName().getText().trim());
            predstava.setMesto(getTxtPlace().getText().trim());
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MMM/yyyy HH:mm:ss");
                String dateStr = getTxtTime().getText().trim();
                LocalDateTime dateTime = LocalDateTime.parse(dateStr, dtf);
                        
           if(!dateTime.isAfter(LocalDateTime.now())){
               throw new Exception("Morate uneti datum koji je posle danasnjeg");
               //JOptionPane.showMessageDialog(this, "Morate uneti datum koji je posle danasnjeg");
           }
            predstava.setVreme(dateTime);
            try{
            predstava.setKapacitet(Integer.parseInt(getTxtCapcity().getText()));
            }catch(Exception e){
                 JOptionPane.showMessageDialog(this, "Kapacitet mora biti broj");
            }
            
            Communication.getInstance().addPredstava(predstava);
            JOptionPane.showMessageDialog(this, "Predstava successfully saved.");
            this.dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage() +"\n"+"Predstava not saved","ERROR",JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnSaveActionPerformed
/**
 * Metoda koja se poziva kada korisnik pritisne dugme za brisanje predstave.
 * Ova metoda prikazuje dijalog za potvrdu brisanja, a zatim obavlja brisanje predstave
 * i svih povezanih rezervacija, karata i planova gledanja.
 * @param evt Dogaƒëaj koji je pokrenuo poziv metode
 */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        //TODO...
        int br=JOptionPane.showConfirmDialog(this, "Are you sure you want to delete a show, potentially deleting all reservations and tickets and viewing plans for it.","WARNING",JOptionPane.YES_NO_OPTION);
        if(br==JOptionPane.YES_OPTION){
        Predstava pr=(Predstava) localStorage.getItemFromHashMap("Predstava");
        
        try {
            for(StavkaRezervacije st:getStavke()){
                if(st.getPredstavaId().getPredstavaId().equals(pr.getPredstavaId())){
                    for(Karta k:getKarte()){
                        if(st.getStavkaId().equals(k.getStavkaId().getStavkaId())){
                            deleteKarta(k);
                        }
                    }
                    deleteStavke(st);
                }
            }
            for(PlanGledanja pl:getPlan()){
                if(pl.getPredstavaId().getPredstavaId().equals(pr.getPredstavaId())){
                    deletePlanGledanja(pl);
                }
            }
            Communication.getInstance().deleteShow(pr);
            JOptionPane.showMessageDialog(this, "Predstava successfully deleted.");
            this.dispose();
        } catch (Exception ex) {
           JOptionPane.showMessageDialog(this, ex.getMessage() +"\n"+"System can not delete this show","ERROR",JOptionPane.ERROR_MESSAGE);
        }
        }
            
    }//GEN-LAST:event_btnDeleteActionPerformed
/**
 * Metoda koja se poziva kada korisnik pritisne dugme za otkazivanje ili zatvaranje prozora.
 * Ova metoda jednostavno zatvara trenutni prozor.
 * @param evt Dogaƒëaj koji je pokrenuo poziv metode
 */
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCapacity;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTextField txtCapacity;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPlace;
    private javax.swing.JTextField txtTime;
    // End of variables declaration//GEN-END:variables
/**
 * Metoda koja vraƒáa dugme za otkazivanje.
 *
 * @return Dugme za otkazivanje
 */
    public JButton getBtnCancel() {
        return btnCancel;
    }
/**
 * Metoda koja vraƒáa dugme za brisanje.
 *
 * @return Dugme za brisanje
 */
    public JButton getBtnDelete() {
        return btnDelete;
    }

 /**
 * Metoda koja vraƒáa dugme za ƒçuvanje.
 *
 * @return Dugme za ƒçuvanje
 */
    public JButton getBtnSave() {
        return btnSave;
    }

/**
 * Metoda koja vraƒáa panel.
 *
 * @return Panel
 */
    public JPanel getjPanel1() {
        return jPanel1;
    }
/**
 * Metoda koja vraƒáa oznaku za identifikator.
 *
 * @return Oznaka za identifikator
 */
    public JLabel getLblId() {
        return lblId;
    }

  
/**
 * Metoda koja vraƒáa oznaku za kapacitet.
 *
 * @return Oznaka za kapacitet
 */
    public JLabel getLblCapacity() {
        return lblCapacity;
    }
/**
 * Metoda koja vraƒáa oznaku za ime.
 *
 * @return Oznaka za ime
 */
    public JLabel getLblName() {
        return lblName;
    }
/**
 * Metoda koja vraƒáa oznaku za vreme.
 *
 * @return Oznaka za vreme
 */
    public JLabel getLblTime() {
        return lblTime;
    }
/**
 * Metoda koja vraƒáa tekstualno polje za mesto.
 *
 * @return Tekstualno polje za mesto
 */
    public JTextField getTxtPlace() {
        return txtPlace;
    }
    /**
 * Metoda koja vraƒáa tekstualno polje za vreme.
 *
 * @return Tekstualno polje za vreme
 */
      public JTextField getTxtTime() {
        return txtTime;
    }
/**
 * Metoda koja vraƒáa tekstualno polje za identifikator.
 *
 * @return Tekstualno polje za identifikator
 */
    public JTextField getTxtID() {
        return txtID;
    }
/**
 * Metoda koja vraƒáa tekstualno polje za ime.
 *
 * @return Tekstualno polje za ime
 */
    public JTextField getTxtName() {
        return txtName;
    }
/**
 * Metoda koja vraƒáa tekstualno polje za kapacitet.
 *
 * @return Tekstualno polje za kapacitet
 */
    public JTextField getTxtCapcity() {
        return txtCapacity;
    }
    /**
 * Metoda za dodavanje slu≈°aoca dogaƒëaja na dugme "Save".
 *
 * @param actionListener Slu≈°alac dogaƒëaja koji se dodaje
 */

    public void addSaveBtnActionListener(ActionListener actionListener) {
        btnSave.addActionListener(actionListener);
    }

  
/**
 * Metoda za dodavanje slu≈°aoca dogaƒëaja na dugme "Cancel".
 *
 * @param actionListener Slu≈°alac dogaƒëaja koji se dodaje
 */
    public void addCancelBtnActionListener(ActionListener actionListener) {
        btnCancel.addActionListener(actionListener);
    }
/**
 * Metoda za dodavanje slu≈°aoca dogaƒëaja na dugme "Delete".
 *
 * @param actionListener Slu≈°alac dogaƒëaja koji se dodaje
 */
    public void addDeleteBtnActionListener(ActionListener actionListener) {
        btnDelete.addActionListener(actionListener);
    }

/**
 * Metoda koja priprema prikaz forme na osnovu re≈æima rada.
 *
 * @param formMode Re≈æim rada forme
 */
    private void prepareView(FormMode formMode) {
       
        setupComponents(formMode);

    }

    

   /**
 * Metoda koja pode≈°ava komponente forme na osnovu re≈æima rada.
 * za add se mogu videti sve stavke ne moze se dodati id i nije moguce kliknuti delte dugme
 * za gledanje ne moze add dugme i nista da se promeni al moze delete
 * edit se za kartu ne poziva iako ima napisano
 * @param formMode Re≈æim rada forme
 */
    private void setupComponents(FormMode formMode) {
        switch (formMode) {
            case FORM_ADD:
                getBtnCancel().setEnabled(true);
                getBtnDelete().setEnabled(false);
        
                getBtnSave().setEnabled(true);
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MMM/yyyy HH:mm:ss");
                String dateStr = "18/Feb/2023 20:45:25";
                //LocalDateTime dateTime = LocalDateTime.parse(dateStr, dtf);
                getTxtTime().setText(dateStr);
                getTxtID().setEnabled(false);
                getTxtName().setEnabled(true);
                getTxtPlace().setEnabled(true);
                getTxtCapcity().setEnabled(true);
                getTxtTime().setEnabled(true);
                
                break;
            case FORM_VIEW:
                JOptionPane.showMessageDialog(this,"Sistem je ucitao predstavu.");
                getBtnCancel().setEnabled(true);
                getBtnDelete().setEnabled(true);
        
                getBtnSave().setEnabled(false);

                //zabrani izmenu vrednosti
                getTxtID().setEnabled(false);
                getTxtName().setEnabled(false);
                getTxtCapcity().setEnabled(false);
                getTxtPlace().setEnabled(false);
                getTxtTime().setEnabled(false);
                setForView();
                

                //get product
                //TODO..
                break;
            case FORM_EDIT:
                getBtnCancel().setEnabled(true);
                getBtnDelete().setEnabled(false);
      
                getBtnSave().setEnabled(false);

                //zabrani izmenu vrednosti
                getTxtID().setEnabled(false);
                getTxtName().setEnabled(true);
                getTxtCapcity().setEnabled(true);
                getTxtPlace().setEnabled(true);
                getTxtTime().setEnabled(true);
                
                break;
        }
    }
/**
 * Metoda koja postavlja vrednosti komponenti za prikaz predstave.
 * izvlaci iz localStorage predstavu i postavlja njene atribute na formu
 */
    private void setForView() {
        Predstava pr=(Predstava) localStorage.getItemFromHashMap("Predstava");
        getTxtID().setText(pr.getPredstavaId().toString());
        getTxtName().setText(pr.getNaziv());
        
        getTxtTime().setText(pr.getVreme().toString());
        getTxtPlace().setText(pr.getMesto());
        getTxtCapcity().setText(pr.getKapacitet().toString());
    }
    /**
 * Metoda koja vraƒáa sve stavke rezervacija.
 *
 * @return Lista stavki rezervacija
 * @throws Exception Ukoliko se desi gre≈°ka prilikom komunikacije sa serverom
 */
     private List<StavkaRezervacije> getStavke() throws Exception {
         return Communication.getInstance().getAllItemReservations();
    }
     /**
 * Metoda koja vraƒáa sve karte.
 *
 * @return Lista karata
 * @throws Exception Ukoliko se desi gre≈°ka prilikom komunikacije sa serverom
 */
      private List<Karta> getKarte() throws Exception {
         return Communication.getInstance().getAllTickets();
    }
      /**
 * Metoda koja bri≈°e stavku rezervacije.
 *
 * @param st Stavka rezervacije koja se bri≈°e
 * @throws Exception Ukoliko se desi gre≈°ka prilikom komunikacije sa serverom
 */
      private void deleteStavke(StavkaRezervacije st) throws Exception {
        Communication.getInstance().deleteStavka(st);
    }
/**
 * Metoda koja bri≈°e kartu.
 *
 * @param k Karta koja se bri≈°e
 * @throws Exception Ukoliko se desi gre≈°ka prilikom komunikacije sa serverom
 */
    private void deleteKarta(Karta k) throws Exception {
        Communication.getInstance().deleteTicket(k);
    }
/**
 * Metoda koja vraƒáa sve planove gledanja.
 *
 * @return Lista planova gledanja
 * @throws Exception Ukoliko se desi gre≈°ka prilikom komunikacije sa serverom
 */
    private List<PlanGledanja> getPlan() throws Exception {
        return Communication.getInstance().getAllPlan();
    }
/**
 * Metoda koja bri≈°e plan gledanja.
 *
 * @param pl Plan gledanja koji se bri≈°e
 * @throws Exception Ukoliko se desi gre≈°ka prilikom komunikacije sa serverom
 */
    private void deletePlanGledanja(PlanGledanja pl) throws Exception {
        Communication.getInstance().deletePlan(pl);
    }

}
